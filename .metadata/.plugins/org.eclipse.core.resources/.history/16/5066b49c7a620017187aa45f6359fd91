/**    
 * 文件名：ClientAck.java    
 *    
 * 版本信息：    
 * 日期：2017年6月12日    
 * Copyright 足下 Corporation 2017     
 * 版权所有    
 *    
 */
package FactoryPackaget;

import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import CacheDataReset.CacheModel;
import CacheDataReset.DataCacheBus;
import DataBus.CacheData;
import JNetSocket.UDPClient;
import NetModel.NetDataAddress;
import NetPackaget.PackagetRandom;
import NetPackaget.SubNetPackaget;
import NetProtocol.judpClient;

/**    
 *     
 * 项目名称：NetProtocol    
 * 类名称：ClientAck    
 * 类描述：获取返回的Ack及数据
 * 真正关闭socket;
 * 创建人：jinyu    
 * 创建时间：2017年6月12日 下午10:45:52    
 * 修改人：jinyu    
 * 修改时间：2017年6月12日 下午10:45:52    
 * 修改备注：    
 * @version     
 *     
 */
 public class ClientAck {
 private static   ExecutorService cachedThreadPool = Executors.newCachedThreadPool();  
 /*
  * 唯一检查
  */
 private static  HashSet<UDPClient> ackClient = new HashSet<UDPClient>();
 /*
  * 监视队列
  */
private static ReferenceQueue<judpClient>  freQueue = new ReferenceQueue<judpClient>();  

/*
 * 判断使用情况
 */
private static ConcurrentHashMap<WeakReference<judpClient>,UDPClient> listenerClient=new ConcurrentHashMap< WeakReference<judpClient>,UDPClient>();
private  volatile static boolean isStart=true;
private static ConcurrentHashMap<WeakReference<UDPClient>,judpClient> listenerData=new ConcurrentHashMap< WeakReference<UDPClient>,judpClient>();

//保存逻辑关闭的socket;
private static  CacheData<Long,UDPClient> closeCache=new CacheData<Long,UDPClient>(100, 60, false);

 /**
   * 添加获取ack
   */
  public static void put(judpClient curClient,UDPClient client) 
{
    if(ackClient.add(client))
    {
        //数据与freQueue关联监视
        WeakReference<judpClient> wr = new WeakReference<judpClient>(curClient,freQueue);
        WeakReference<UDPClient> key=new WeakReference<UDPClient>(client);
        listenerClient.put(wr, client);
        listenerData.put(key, curClient);
        if(isStart)
        {
            isStart=false;
            startThread();
            CacheClientListenter listener=new CacheClientListenter();
            closeCache.setListenter(listener);
        }
        cachedThreadPool.execute(new Runnable(){
            @Override
            public void run() {
                while(true)
                {
                try
                {
                    //接收ack也在接收数据
                   NetDataAddress ack=  key.get().getCallData();
               ReturnCode code=SubNetPackaget.AnalysisNetPackaget(ack.netData);
               if(code.isAck)
                {
                   int num=code.packagetNum;
                   String key=String.valueOf(code.ackPackaget.sessionid)+String.valueOf(code.ackPackaget.packagetID);
                   CacheModel model=DataCacheBus.getInstance().get(key);
                  if(code.ackPackaget.ackType==1)
                  {
                      //该session所有包清除
                      AckQueue.addEndSession(code.ackPackaget.sessionid);
                      DataCacheBus.getInstance().remove(key);
                      for(int i=0;i<num;i++)
                      {
                          key=String.valueOf(code.ackPackaget.sessionid)+String.valueOf(i);
                          DataCacheBus.getInstance().remove(key);
                      }
                     
                  }
                  else if(code.ackPackaget.ackType==2)
                  {
                      //直接把丢失数据发送出去
                      model.client.sendData(model.remoteHost, model.remotePort, model.data);
                  }
                }
               else
               {
                   //数据包回来了;
                   judpClient  cur=listenerData.get(key);
                   //
                   Method method = cur.getClass().getDeclaredMethod("add", NetDataAddress.class);
                   method.setAccessible(true); //没有设置就会报错
                   //调用该方法
                   method.invoke(cur, ack);
               }
               if(client.isClose())
               {
                   //已经逻辑关闭
                   ackClient.remove(client);
               }
                }
                catch(Exception ex)
                {
                    if(client.isClose())
                    {
                        ackClient.remove(client);
                    }
                    return;
                }
                }
            }
        });
    }
}

  /**
   * 检查客户端回收
   */
  private static  void startThread()
  {
      Thread  jclient=new Thread(new Runnable(){
        @SuppressWarnings("unchecked")
        @Override
        public void run() {
      while(true)
      {
          try {
              //外层回收的数据
            WeakReference<judpClient> wr =(WeakReference<judpClient>) freQueue.remove();
            judpClient cl=wr.get();
            if(cl!=null)
            {
                //如果还没有回收也逻辑关闭（即将回收)
                wr.get().close();
            }
            //  外层回收judpClient，进入关闭缓存
            UDPClient tmp=listenerClient.remove(wr);
            long id=PackagetRandom.getInstanceID(this);
            closeCache.put(id, tmp);
            ackClient.remove(tmp);
        } catch (InterruptedException e) {
        
            e.printStackTrace();
        }
      }
        }
      }
      );
      jclient.setDaemon(true);
      jclient.setName("judpClientGC");
      jclient.start();
      //
      Thread  jprotocol=new Thread(new Runnable(){
          @Override
          public void run() {
        while(true)
        {
                       //外层已经逻辑关闭但是还有引用
                      //逻辑关闭的都不能再用了
                     // 否则就是有地方有引用但是也没有关闭（暂时不管理该类)
                        for(Map.Entry<WeakReference<judpClient>,UDPClient> e: listenerClient.entrySet() ){
                            WeakReference<judpClient> wr=e.getKey();
                            judpClient client=wr.get();
                            if(client!=null)
                            {
                              if(client.isClose())
                              {
                                  //逻辑关闭了，进入关闭缓存缓存
                                  long id=PackagetRandom.getInstanceID(this);
                                  closeCache.put(id, e.getValue());
                                  ackClient.remove(e.getValue());
                              }
                            }
                        }
        }
          }
            
        }
        );
      jprotocol.setDaemon(true);
      jprotocol.setName("judpClientClose");
      jprotocol.start();
  }
 }
